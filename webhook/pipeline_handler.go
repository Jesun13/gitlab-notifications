package webhook

import (
	"fmt"
	"github.com/mitchellh/mapstructure"
	"gitlab-notificatons/models"
	"gitlab-notificatons/telegram"
	"log"
)

type PipelineHandler struct{}

func (p *PipelineHandler) HandleEvent(event map[string]interface{}, topicKey string) error {
	var pipelineEvent models.PipelineEvent
	if err := mapstructure.Decode(event, &pipelineEvent); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ merge_request: %v", err)
	}
	emoji := ""
	status := pipelineEvent.ObjectAttributes.Status
	message := fmt.Sprintf("<b>Pipeline —Å–æ–±—ã—Ç–∏–µ</b> –≤ –ø—Ä–æ–µ–∫—Ç–µ <b>%s</b> –æ—Ç <b>%s</b>\n–°—Ç–∞—Ç—É—Å: <b>%s</b>\n–°—Å—ã–ª–∫–∞: %s", pipelineEvent.Project.Name, pipelineEvent.User.Name, status, pipelineEvent.ObjectAttributes.URL)

	fmt.Println(pipelineEvent)
	switch status {
	case "success":
		emoji = "‚úÖ"
	case "failed":
		emoji = "‚ùå"
	default:
		emoji = "üì¢"
	}

	message = emoji + " " + message

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
	err := telegram.SendTelegramMessage(message, topicKey, nil)
	if err != nil {
		return err
	}

	log.Println("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è Pipeline")
	return nil
}
